 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/docs/Electron App PRD.md b/docs/Electron App PRD.md
index d78680d..4889593 100644
--- a/docs/Electron App PRD.md	
+++ b/docs/Electron App PRD.md	
@@ -8,50 +8,51 @@ The goal is to build a **lightweight Electron app** that efficiently ingests, or
 
 The app will offer a **user-friendly UI** for navigation, feature customization (default export format, output folder overrides), and include helpful modules like a **support section**, **FAQ**, and **changelog**.
 
 It will be **Windows-only**, due to dependencies on utilities such as **FFmpeg** and system-level file manipulation. Minimal dependencies will ensure it performs well even on lower-spec systems.
 
 ---
 
 ### 🌟 Goals & Objectives
 
 * Build an **Electron-based desktop application** for Windows.
 * Allow ingestion of **large folder sets** containing professional footage without performance degradation.
 * Provide **export functionality** supporting multiple formats: MXF, RED, MP4.
 * Offer a **clean, intuitive interface** with easy-to-navigate sections.
 * Support user customization of output settings (e.g., format, destination folder).
 * Include **support features**: Help, FAQ, changelog.
 * Keep the app **lightweight** with minimal external dependencies.
 
 ---
 
 ### 📃 Detailed Features
 
 #### ✂ Folder Ingestion
 
 * Droppable area or explorer-based folder selection.
 * Background indexing of folder contents.
+* Recursively scan dropped folders for **.R3D**, **.MOV**, and **.MXF** files to collect absolute paths.
 
 #### 📂 Organization & Metadata
 
 * Group footage by camera, date, file type, etc.
 * Display associated metadata: resolution, codec, duration, etc.
 
 #### 🎥 Clip Preview & Export
 
 * Built-in visual previewer for clips.
 * Allow users to:
 
   * Set export format per group
   * Export selected/all footage
   * Choose between MP4, MXF, or RED-supported formats
 
 #### 🏠 UI & User Settings
 
 * Easy-to-use layout with sidebar navigation
 * Settings section for:
 
   * Default export format
   * Output folder override
   * Theme (optional)
 
 #### 🌐 Support & Help
diff --git a/docs/PRD - CHANGES.md b/docs/PRD - CHANGES.md
index 8393e3e..f2825df 100644
--- a/docs/PRD - CHANGES.md	
+++ b/docs/PRD - CHANGES.md	
@@ -31,25 +31,30 @@ This document tracks any change in scope, feature reordering, added ideas, desig
 
 **Change Type:** Added
 **Description:** Created core file management functionality with three key modules:
 1. pathUtils.js - Ensures safe Windows path handling
 2. fileTypeUtils.js - Classifies video files by camera source
 3. fileManager.js - Handles folder scanning and file organization
 
 **Impacted Sections:** 
 - Created `/src/scripts/utils/pathUtils.js`
 - Created `/src/scripts/utils/fileTypeUtils.js`
 - Created `/src/scripts/fileManager.js`
 - Implemented function contracts from PRD for fileManager.js
 
 **Next Steps:** Proceed with implementing the gallery display functionality.
 
 
 📝 Change Log
 
 [2025-05-21] – Merged PRD Versions
 
 Change Type: Removed
 Description: Consolidated PRD.md into Electron App PRD.md to avoid duplication.
 Impacted Sections: PRD.md, Electron App PRD.md
 Next Steps: Delete or archive PRD.md, continue edits only in Electron App PRD.md.
 
+### [2025-05-21] – Recursive Folder Scanning
+**Change Type:** Added
+**Description:** Implemented IPC-based folder scanning to handle large drag-and-drop imports and gather absolute paths for .R3D, .MOV, and .MXF files.
+**Impacted Sections:** main.js, preload.js, src/scripts/fileManager.js, PRD folder ingestion section.
+**Next Steps:** Integrate scanned file groups into gallery display.
diff --git a/main.js b/main.js
index c79b989..8aee0d8 100644
--- a/main.js
+++ b/main.js
@@ -1,58 +1,90 @@
 const { app, BrowserWindow, ipcMain, dialog } = require('electron');
 const path = require('path');
+const fs = require('fs/promises');
 
 function createWindow() {
   const win = new BrowserWindow({
     width: 1280,
   height: 800,
   webPreferences: {
     preload: path.join(__dirname, 'preload.js'),
     contextIsolation: true,
     nodeIntegration: false
   }
   });
 
   win.loadFile('src/index.html');
 
   // Open DevTools automatically (optional during development)
   // win.webContents.openDevTools();
 }
 
 // ===== Folder Picker Handling =====
 ipcMain.handle('select-folder', async () => {
   const result = await dialog.showOpenDialog({
     properties: ['openDirectory']
   });
 
   if (result.canceled || result.filePaths.length === 0) {
     return null;
   }
 
   return result.filePaths[0];
 });
 
+// ===== Folder Scanning =====
+ipcMain.handle('scan-folder', async (event, folderPath) => {
+  const supported = new Set(['.r3d', '.mov', '.mxf']);
+
+  const files = [];
+  const stack = [folderPath];
+
+  try {
+    while (stack.length) {
+      const dir = stack.pop();
+      const entries = await fs.readdir(dir, { withFileTypes: true });
+      for (const entry of entries) {
+        const full = path.join(dir, entry.name);
+        if (entry.isDirectory()) {
+          stack.push(full);
+        } else if (entry.isFile()) {
+          const ext = path.extname(entry.name).toLowerCase();
+          if (supported.has(ext)) {
+            files.push(full);
+          }
+        }
+      }
+    }
+
+    return files;
+  } catch (err) {
+    console.error('scan-folder error:', err);
+    throw err;
+  }
+});
+
 // ===== App Lifecycle =====
 app.whenReady().then(() => {
   createWindow();
 
   app.on('activate', () => {
     if (BrowserWindow.getAllWindows().length === 0) createWindow();
   });
 });
 
 app.on('window-all-closed', () => {
   if (process.platform !== 'darwin') {
     app.quit();
   }
 });
 
 app.on('web-contents-created', (event, contents) => {
   // Prevent navigation when dragging files in
   contents.on('will-navigate', (e) => {
     e.preventDefault();
     console.log('Navigation prevented');
   });
   
   // Prevent opening new windows
   contents.setWindowOpenHandler(() => {
     console.log('Window open prevented');
diff --git a/preload.js b/preload.js
index f1b26a2..48e87db 100644
--- a/preload.js
+++ b/preload.js
@@ -1,5 +1,6 @@
 const { contextBridge, ipcRenderer } = require('electron');
 
 contextBridge.exposeInMainWorld('electronAPI', {
-  selectFolder: () => ipcRenderer.invoke('select-folder')
+  selectFolder: () => ipcRenderer.invoke('select-folder'),
+  scanFolder: (folderPath) => ipcRenderer.invoke('scan-folder', folderPath)
 });
diff --git a/src/scripts/fileManager.js b/src/scripts/fileManager.js
index 12dc44c..d332220 100644
--- a/src/scripts/fileManager.js
+++ b/src/scripts/fileManager.js
@@ -1,165 +1,82 @@
 /**
  * Handles folder scanning, video file detection, and camera grouping
  * 
  * Note: This script now uses the electronAPI bridge exposed via preload.js
  * Instead of directly using Node.js APIs which aren't available in the renderer
  * with contextIsolation: true and nodeIntegration: false
  */
 
-// Using the exposed electronAPI instead of direct Node.js modules
-// These functions need to be moved to main process or preload
+// Uses the electronAPI bridge instead of Node.js modules
 
 /**
  * Exposes folder scanning and file grouping functions to the window object
  * to be accessible from the renderer
  */
 (function() {
   // This is a client-side wrapper that will call electronAPI methods
   
   /**
-   * Recursively scans a folder for video files
-   * @param {string} folderPath - Path to the folder to scan
-   * @returns {Promise<Array<{path: string, name: string, size: number}>>} Array of video files
+   * Recursively scans a folder for supported video files.
+   * @param {string} folderPath - Absolute path to the folder to scan.
+   * @returns {Promise<string[]>} Array of absolute file paths.
    */
   window.scanFolder = async function(folderPath) {
     try {
       console.log("Wrapper: Scanning folder", folderPath);
-      // This should be implemented in preload/main to actually perform the scan
-      
-      // For now, return an empty array with a message since the functionality
-      // needs to be moved to main process
-      console.warn("scanFolder requires main process implementation");
-      alert("Folder scanning functionality requires an update to use electronAPI instead of Node.js APIs directly. This will be implemented in main/preload.");
-      
-      return [];
+      if (!window.electronAPI || typeof window.electronAPI.scanFolder !== 'function') {
+        throw new Error('scanFolder API not available');
+      }
+      const files = await window.electronAPI.scanFolder(folderPath);
+      return files;
     } catch (error) {
       console.error("Error in scanFolder wrapper:", error);
       throw error;
     }
   };
 
   /**
    * Groups video files by their camera source
    * @param {Array<{path: string, name: string, size: number}>} files - Array of video files
    * @returns {Promise<Array>} Array of camera groups with metadata
    */
   window.groupByCamera = async function(files) {
     try {
       console.log("Wrapper: Grouping files by camera", files.length);
-      
-      // For now, create a simple mock structure that the UI can work with
-      // This should be implemented in main/preload
-      console.warn("groupByCamera requires main process implementation");
-      
-      // Mock a camera group for demo purposes
-      return [{
-        name: "Demo Camera",
-        files: files.map((f, i) => ({
-          file: { name: `demo-file-${i}.mp4` },
-          path: f.path || `/mock/path/demo-file-${i}.mp4`
-        })),
-        totalSize: 1024 * 1024, // 1MB mock size
-        fileCount: files.length
-      }];
+      const groups = {};
+      files.forEach((p) => {
+        const name = p.split(/[/\\]/).pop();
+        const ext = name.slice(name.lastIndexOf('.')).toLowerCase();
+        const key = ext.replace('.', '').toUpperCase();
+        if (!groups[key]) groups[key] = [];
+        groups[key].push({ file: { name }, path: p });
+      });
+      return Object.keys(groups).map(k => ({
+        name: k,
+        files: groups[k],
+        totalSize: groups[k].length,
+        fileCount: groups[k].length
+      }));
     } catch (error) {
       console.error("Error in groupByCamera wrapper:", error);
       throw error;
     }
   };
 
   /**
    * Handles a folder drop event
    * @param {string} folderPath - Path to the dropped folder
    * @returns {Promise<Array>} Array of camera groups
    */
   window.handleFolderDrop = async function(folderPath) {
     try {
       console.log("Wrapper: Handling folder drop", folderPath);
       
       const files = await window.scanFolder(folderPath);
       const groups = await window.groupByCamera(files);
       return groups;
     } catch (error) {
       console.error("Error in handleFolderDrop wrapper:", error);
       throw error;
     }
   };
 })();
-
-// NOTE: The following code needs to be moved to main.js or preload.js:
-/*
-const fs = require('fs').promises;
-const path = require('path');
-const { toWindowsPath, ensureAbsolutePath, validatePath } = require('./utils/pathUtils');
-const { isSupportedVideoFormat, groupFilesByCamera } = require('./utils/fileTypeUtils');
-
-async function scanFolder(folderPath) {
-    // Ensure we have a valid, absolute path
-    const absolutePath = ensureAbsolutePath(folderPath);
-    const windowsSafePath = toWindowsPath(absolutePath);
-
-    // Validate the path exists
-    const isValid = await validatePath(windowsSafePath);
-    if (!isValid) {
-        throw new Error(`Invalid or inaccessible path: ${windowsSafePath}`);
-    }
-
-    const videoFiles = [];
-
-    async function scanDirectory(currentPath) {
-        const entries = await fs.readdir(currentPath, { withFileTypes: true });
-
-        for (const entry of entries) {
-            const fullPath = path.join(currentPath, entry.name);
-
-            if (entry.isDirectory()) {
-                // Recursively scan subdirectories
-                await scanDirectory(fullPath);
-            } else if (entry.isFile() && isSupportedVideoFormat(entry.name)) {
-                // Get file stats for size
-                const stats = await fs.stat(fullPath);
-                
-                videoFiles.push({
-                    path: fullPath,
-                    name: entry.name,
-                    size: stats.size
-                });
-            }
-        }
-    }
-
-    // Start the recursive scan
-    await scanDirectory(windowsSafePath);
-    return videoFiles;
-}
-
-async function groupByCamera(files) {
-    // First group files by camera using fileTypeUtils
-    const groupedByCamera = groupFilesByCamera(files);
-
-    // Convert groups object to array format with metadata
-    const cameraGroups = Object.entries(groupedByCamera).map(([camera, files]) => {
-        const totalSize = files.reduce((sum, file) => sum + file.size, 0);
-        
-        return {
-            name: camera,
-            files: files,
-            totalSize: totalSize,
-            fileCount: files.length
-        };
-    });
-
-    return cameraGroups;
-}
-
-async function handleFolderDrop(folderPath) {
-    try {
-        const files = await scanFolder(folderPath);
-        const groups = await groupByCamera(files);
-        return groups;
-    } catch (error) {
-        console.error('Error processing folder:', error);
-        throw error;
-    }
-}
-*/
 
EOF
)